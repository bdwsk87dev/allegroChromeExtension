'use strict';

var inspect = require('util').inspect;

var currentExifDate = require('current-exif-date');
var isJpg = require('is-jpg');
var isPlainObj = require('is-plain-obj');
var piexif = require('piexifjs');
var SafeBuffer = require('safe-buffer').Buffer;

var DateTime = piexif.ImageIFD.DateTime;
var dump = piexif.dump;
var insert = piexif.insert;
var load = piexif.load;

var ERROR = 'Expected a `Buffer` of JPEG';
var SIZE_ERROR = 'JPEG must be 107 bytes or more.';

module.exports = function modifyExif(buf, modifierFn, option) {
	if (!Buffer.isBuffer(buf)) {
		throw new TypeError(ERROR + ', but got a non-Buffer value ' + inspect(buf) + '.');
	}

	if (buf.length === 0) {
		throw new RangeError(ERROR + ', but got an empty buffer. ' + SIZE_ERROR);
	}

	if (buf.length < 107) {
		throw new RangeError(ERROR + ', but got a buffer with insufficient data size ' + buf.length + '. ' + SIZE_ERROR);
	}

	if (!isJpg(buf) && !isTif(buf)) {
		throw new RangeError(ERROR + ', but got a buffer of neither.');
	}

	if (typeof modifierFn !== 'function') {
		throw new TypeError('Expected a function to modify original Exif data, but got a non-function value ' + inspect(modifierFn) + '.');
	}

	if (option !== undefined) {
		if (!isPlainObj(option)) {
			throw new TypeError('Expected a plain object to set modify-exif option, but got ' + inspect(option) + '.');
		}

		if (option.keepDateTime !== undefined && typeof option.keepDateTime !== 'boolean') {
			throw new TypeError('Expected `keepDateTime` option to be a Boolean value, but got ' + inspect(option.keepDateTime) + '.');
		}
	} else {
		option = {};
	}

	var str = buf.toString('binary');
	var loaded = load(str);

	if (!option.keepDateTime) {
		loaded['0th'][DateTime] = currentExifDate();
	}

	modifierFn(loaded);

	return SafeBuffer.from(insert(dump(loaded), str), 'binary');
};
